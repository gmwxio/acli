{{define "newsubcmd" -}}
package {{.Name}}

import (
	"fmt"

	"github.com/{{.Org}}/{{.Project}}/internal/types"
)

type {{.Name | ToLowerCamel}}Opt struct {
	rt    *types.Root
	Debug bool
	// public fields are flags by default. Use annotations to adjust eg. `opts:"mode=arg"`
}

func New{{.Name | ToCamel}}(rt *types.Root) interface{} {
	in := {{.Name | ToLowerCamel}}Opt{
		rt: rt,
	}
	return &in
}

func (in *{{.Name | ToLowerCamel}}Opt) Run() {
	in.rt.Config(in)
	fmt.Printf("todo implement {{.Name}}\n")
}
{{end}}

{{define "mainreg"}}
func init() {
	cliBldr.AddCommand(opts.New({{.Name}}.New{{.Name | ToCamel}}(rflg)).Name("{{.Name}}"))
}
{{end}}

{{/* 
https://go.dev/play/p/V94BPN0uKD
{{$n := len .}}{{range  $i, $e := .}}{{if $i}}, {{end}}{{if eq (plus1 $i) $n}}and {{end}}{{$e}}{{end}}.
*/}}

{{define "mainregwithparent"}}
func init() {
// imports
{{$org := .Org -}}
{{$path := .Path -}}
{{range  $i, $e := .Names -}}
// 	"github.com/{{$org}}/{{.Project}}/internal/{{$path}}/{{$e}}"
{{end -}}
	cliBldr.
{{- range .Parent -}}
AddCommand(opts.New(&struct{}{}).Name("{{.}}").
{{end -}}
{{range  $i, $e := .Names -}}
{{if $i}}.
{{end -}}
		AddCommand(opts.New({{$e}}.New{{$e | ToCamel}}(rflg)).Name("{{$e}}"))
{{- end}}
{{- range .Parent -}}
)
{{- end}}
}
{{end}}

{{define "file_header" -}}
package main

import (
	"github.com/jpillora/opts"
{{- $org := .Org -}}
{{$path := .Path -}}
{{$proj := .Project -}}
{{- range  $i, $e := .Names}}
	"github.com/{{$org}}/{{$proj}}/internal/{{$path}}/{{$e}}"
{{- end}}
)

{{end}}

{{define "mainregwithparent_addstruct" -}}
func init() {
	cliBldr.AddStruct("{{.Path}}",
{{- range  $i, $e := .Names}}
		opts.New({{$e}}.New{{$e | ToCamel}}(rflg)).Name("{{$e}}"),
{{- end}}
	)
}
{{end}}
